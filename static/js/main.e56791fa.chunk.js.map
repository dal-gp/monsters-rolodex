{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","props","monsters","map","monster","src_components_Card","Object","assign","key","SearchBox","type","placeholder","this","value","text","onChange","onTextChange","React","Component","App","state","handleChange","e","_this","setState","target","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","src_components_SearchBox","src_components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAgBeA,qBAbF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,GAAIC,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,MACxB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OACEE,IAAI,UACJC,IAAG,wBAAAC,OAA0BT,EAA1B,6BAELG,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,MCGKQ,EAVE,SAAAC,GACf,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZK,EAAMC,SAASC,IAAI,SAAAC,GAClB,OAAOX,EAAAC,EAAAC,cAACU,EAADC,OAAAC,OAAA,CAAMC,IAAKJ,EAAQd,IAAQc,QCY3BK,0LAdX,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACVc,KAAK,SACLC,YAAaC,KAAKX,MAAMU,YACxBE,MAAOD,KAAKX,MAAMa,KAClBC,SAAUH,KAAKX,MAAMe,uBATPC,IAAMC,YCsCfC,6MAnCbC,MAAQ,CACNlB,SAAU,GACVY,KAAM,MAGRO,aAAe,SAAAC,GACbC,EAAKC,SAAS,CAAEV,KAAMQ,EAAEG,OAAOZ,4FAGb,IAAAa,EAAAd,KAClBe,MAAM,6CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKF,SAAS,CAAEtB,SAAU6B,uCAEpC,IAAAC,EACoBpB,KAAKQ,MAAxBlB,EADD8B,EACC9B,SAAUY,EADXkB,EACWlB,KACZmB,EAAmB/B,EAASgC,OAAO,SAAA9B,GACvC,OAAOA,EAAQb,KAAK4C,cAAcC,SAAStB,EAAKqB,iBAElD,OACE1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAC0C,EAAD,CACExB,MAAOD,KAAKQ,MAAMN,KAElBE,aAAcJ,KAAKS,aACnBV,YAAY,mBAGdlB,EAAAC,EAAAC,cAAC2C,EAAD,CAAUpC,SAAU+B,YA9BVhB,IAAMC,WCMJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.e56791fa.chunk.js","sourcesContent":["import React from 'react'\nimport './Card.css'\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='card-container'>\n      <img\n        alt='monster'\n        src={`https://robohash.org/${id}?set=set2&size=180x180 `}\n      />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport './CardList.css'\nimport Card from './Card'\n\nconst CardList = props => {\n  return (\n    <div className='card-list'>\n      {props.monsters.map(monster => {\n        return <Card key={monster.id} {...monster} />\n      })}\n    </div>\n  )\n}\n\nexport default CardList\n","import React from 'react'\n\nimport './SearchBox.css'\n\nclass SearchBox extends React.Component {\n  render() {\n    return (\n      <div>\n        <input\n          className='search'\n          type='search'\n          placeholder={this.props.placeholder}\n          value={this.props.text}\n          onChange={this.props.onTextChange}\n        />\n      </div>\n    )\n  }\n}\n\nexport default SearchBox\n","import React from 'react'\n\nimport './App.css'\nimport CardList from './components/CardList'\nimport SearchBox from './components/SearchBox'\n\nclass App extends React.Component {\n  state = {\n    monsters: [],\n    text: ''\n  }\n\n  handleChange = e => {\n    this.setState({ text: e.target.value })\n  }\n\n  componentDidMount() {\n    fetch('http://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n  render() {\n    const { monsters, text } = this.state\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(text.toLowerCase())\n    })\n    return (\n      <div className='App'>\n        <h1>Monster Rolodex</h1>\n        <SearchBox\n          value={this.state.text}\n          // onTextChange={e => this.setState({ text: e.target.value })}\n          onTextChange={this.handleChange}\n          placeholder='search monster'\n        />\n\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}